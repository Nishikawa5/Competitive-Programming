Strategy:
Brainstorm for many possible algorithms and pick the simplest solution possible
check if the solution satisfies the time limit (check bound of inputs)


• Basic time and space complexity analysis for iterative and recursive algorithms:
– An algorithm with k-nested loops of about n iterations each has O(nk) complexity.
– If your algorithm is recursive with b recursive calls per level and has L levels, the
algorithm has roughly O(bL) complexity, but this is a only a rough upper bound.
The actual complexity depends on what actions are done per level and whether
pruning is possible.
– A Dynamic Programming algorithm or other iterative routine which processes a
2D n ⇥ n matrix in O(k) per cell runs in O(k ⇥ n2) time. This is explained in
further detail in Section 3.5.
– Binary searching over a range of [1..n] has O(log n) complexity

Our advice for ICPC contestants: refrain from coding until you are sure that your algorithm is both correct 
and fast enough.

1.3.4 - Tip 4 Master Programming Languages
The book autors prefer C++ because of the built in STL library, but java is also great in other built in libraries and APIs
and it's easier to debug and also python code can be very short.

For example, if we want to get the factorial of 40, there's no built-in library of C++ that can compute this huge number, but in python
we don't have this limitation. Also in java we have BigInteger type and this can store 40!

#include <bits/stdc++.h> // include all
using namespace std;
int main() {
    int N; scanf("%d\n", &N);
    while (N--) { // loop from N,N-1,...,0
        char x[110]; // set size a bit larger
        scanf("0.%[0-9]...\n", &x); // ‘&’ is optional here
                                    // note: if you are surprised with the technique above,
                                    // please check scanf details in https://en.cppreference.com/w/
        printf("the digits are 0.%s\n", x);
    }
    return 0;
}

Knowing your language can make the problem much easier, in the example above, we needed to get the input of a decimal with
at most 100 digits, so you can use  scanf("0.%[0-9]...\n", &x); to store the input into x (scanf/printf better than cin/cout ?)

The art of Testing Code 
See the edge cases, design tricky tests
Use "fc" in windows to check your code output given an input
To do this, copy and paste the sample input and sample
output from the problem description, then save them to files (named as ‘in’ and ‘out’
or anything else that is sensible). Then, after compiling your program (let’s assume
the executable’s name is the ‘g++’ default ‘a.out’), execute it with an I/O redirection: ‘./a.out < in > myout’. Finally, execute ‘diff myout out’ to highlight the
(potentially subtle) di↵erences, if any exist.

Tests should include tricky corner cases, very small/large cases, close to given limit 


Team Work:
If your teammate is currently coding (and you have no idea for other problems), then
prepare hard corner-case test data (and hopefully your teammate’s code passes all
those). With two team members agreeing on the (potential) correctness of a code, the
likelihood of having lesser (or no) penalty increases.